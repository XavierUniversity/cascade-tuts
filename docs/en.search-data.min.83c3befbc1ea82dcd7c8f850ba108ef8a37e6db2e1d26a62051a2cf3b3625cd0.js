'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cascade-tuts/docs/design/templates/','title':"Templates",'content':"What are Templates? Templates are the lifeblood of building sites and structures within Cascade. They are XHTML documents that provide the basic page structure.\nTemplates typically contain the basic HTML scaffolding and necessary scripts and styles to produce the desired look and feel of a page.\nCreating a Template Templates can be created by clicking Add Content \u0026gt; Default \u0026gt; Template.\nThe most basic template must include the following system-tag.\n \u0026lt;system-region name=\u0026quot;DEFAULT\u0026quot; /\u0026gt; Templates can be as sophisticated or simplistic as needed. System tags are used to define areas of need within a specific page design. For instance, if you wanted a main content area and a sidebar the following could be used:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;!-- head code --\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;system-region name=\u0026#34;DEFAULT\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;sidebar\u0026#34;\u0026gt; \u0026lt;system-region name=\u0026#34;SIDEBAR\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; This code would provide some layout while also allowing multiple formats to be used to define the various components.\nSystem Tags System tags may be used to define various content areas. DEFAULT is required by all templates and can be static, dynamic, or a result of a format acting on a block.\nSystem tags may also be used for metadata tags (e.g. title, author, etc). Available Tags:\n Content Regions  \u0026lt;system-region name=\u0026quot;DEFAULT|CUSTOM_NAME\u0026quot; /\u0026gt; - Any user defined region. DEFAULT is a required element of all templates   Page Name(s)  \u0026lt;system-page-name/\u0026gt; - system name of the page asset (computer-name) \u0026lt;system-page-title/\u0026gt;- user defined Title \u0026lt;system-page-display-name/\u0026gt; - user defined Display Name   Other Metadata  \u0026lt;system-page-author/\u0026gt; - page author, from the metadata field. Not necessarily the Cascade User \u0026lt;system-page-summary/\u0026gt; - user defined summary \u0026lt;system-page-teaser/\u0026gt; - user defined Teaser, from the metadata field \u0026lt;system-page-description/\u0026gt; - user defined description \u0026lt;system-page-keywords/\u0026gt; - user defined Keywords \u0026lt;system-page-start-date/\u0026gt; - page\u0026rsquo;s start date \u0026lt;system-page-end-date/\u0026gt; - page\u0026rsquo;s end date \u0026lt;system-page-meta-date/\u0026gt; - current time when the page is rendered   Helpful Meta Tags - This code, when used in a Template, will render the full \u0026lt;meta name=\u0026quot;keywords|description\u0026quot; content=\u0026quot;CONTENT\u0026quot; /\u0026gt; code  \u0026lt;system-page-meta-description/\u0026gt; \u0026lt;system-page-meta-keywords/\u0026gt;     Cascade Docs\nConfiguration After defining custom system-regions you can then configure the template to use formats and blocks to render static, dynamic or function-based content.\n Configurations can also represent one or more outputs that are used to display page content.\n"});index.add({'id':1,'href':'/cascade-tuts/docs/design/','title':"Design",'content':"Cascade CMS is the Content Management System (CMS) for Xavier University. We will be using these documents to outline how to manage, update and develop new templates, formats and other functionality.\n"});index.add({'id':2,'href':'/cascade-tuts/docs/design/configurations/','title':"Configurations",'content':"What are Configurations? Configurations are collections of one or more outputs used to display page content. Outputs allow the same content to take different forms (PDF, JSON, HTML, etc).\nHere at Xavier we create new configurations for the various Content Types. In V5, we are using the Configurations to reroute code to the proper formats based on the Content Type (e.g. Content, Landing Page, Academic Page, etc.).\nA more detailed definition can be found on the Cascade CMS Knowledge Base for Configurations.\nXavier Example: For content pages, we have 7 different configurations. The most basic is the Content Configuration where we swap the DEFAULT region with the appropriate Content Page format to ensure we write out the proper code foundation.\nConfiguration Settings\n Name: PHP Type of Data: HTML File Extension: PHP Template: v5 XSLT Format: none Template Defined Regions:  Custom JS, Footer, Head Content, Header, SVG   Configuration Defined Regions:  DEFAULT - Inside of the custom format, we build out the content page structure  In most configurations, this is the ONLY item that will change.      Creating a Configuration  Navigate to Manage Site \u0026gt; Configurations Add a new Configuration using Add \u0026gt; Configuration. You may also want to add a new container, depending on the architecture desired. Enter the Name and select the Parent Container, as desired. In the next section, you\u0026rsquo;ll define the outputs, each output is configured using the following fields:  Name (req) Default Output Type of Data - This only affects how the data is viewed within Cascade File Extension (req) - e.g. php, html. This will be appended to the file when published Template XSLT Format Publishable - Helpful to prevent pages you may want to keep on Cascade vs being published to the server Include XML Declaration in Published Files Regions  This will override any TEMPLATE level assignments     Preview \u0026amp; Submit!  You can link to specific outputs if desired, but this is not a feature we are currently using at Xavier.\n"});index.add({'id':3,'href':'/cascade-tuts/docs/development/blocks/','title':"Blocks",'content':"Blocks A block is a piece of content that can be inserted into any page region. This can be done with or without styling. This items are commonly used for repeated content. Such as, an \u0026ldquo;About\u0026rdquo; section that appears on every press release. This would allow the content to be pushed out without managing it in multiple places.\nXHTML/Data Definition XHTML / Data Definition Blocks can essentially be compared to a Page. However, these items cannot be published on their own. They have to be assigned to a region before being rendered to a page.\nTo use a simple XHTML (WYSIWYG) you simply add a new Block (Add Content \u0026gt; Default \u0026gt; Block) to your site and fill in the Editor content.\nTo use a Data Definition, click Properties and assign the appropriate Data Definition and/or meta data set.\nReminder: Blocks cannot be published independently and this content will only be rendered to a page IF it is assigned on the Template, Configuration, or Page Level.\nXML An XML Block\nText Content Blocks are defined as any block that uses XHTML or a Data Definition form fields for editing content\nIndex Index Blocks are dynamically generated system assets, as XML. They can be used to aggregate folders, files or assets (or a combination of all).\nIndex blocks are typically used for creating dynamic content such as navigation menus, sitemaps, etc.\nIndex blocks can be used on an individual folder, or across an entire site.\nUsing an Index Block Index blocks can be created by using Add Content \u0026gt; Default \u0026gt; Block. You will then select the option of Index Block, and placing it into a folder.\n"});index.add({'id':4,'href':'/cascade-tuts/docs/development/','title':"Development",'content':"Within Cascade, you use the Velocity programming language combine with basic HTML.\nMore to come\u0026hellip;.\n"});index.add({'id':5,'href':'/cascade-tuts/docs/design/content-types/','title':"Content Types",'content':"What are Content Types? Content types combine the look and feel ( Configuration) to editable content fields ( Metadata Set and Data Definition) so non-technical users can create and edit pages.\nIn order to create a Content Type you must first setup a Configuration, Metadata Set, and determine if you want to use a WYSIWYG or a Data Definition. These items can be modified after they are linked to a Content Type.\nXavier Example: Staying with our Content Page example, we tie the Content Page DD, our default Metadata Set and Content Configuration to be able to output the proper content.\nContent Type Settings\n Name: V5 Content Page Content Type Configuration: Content Configuration Metadata Set: Default Type of Content: Data Definition Data Definition: Content Page  Creating a Content Type  Navigate to Manage Site \u0026gt; Content Types Add a new Configuration using Add \u0026gt; Content Type. You may also want to add a new container, depending on the architecture desired. Enter the Name and select the Parent Container, as desired. In the Settings Tab, select the following   Configuration Metadata Set Type of Content - Either Data Definition or WYSIWYG  Data Definitions need to be defined before this can be used. The WYSIWYG option will put in a basic WYISWYG item with no additional fields    Submit.  Additional options are available but are not used by Xavier at this time and information on those can be found on the Cascade CMS Content Type Knowledge Base article.\n"});index.add({'id':6,'href':'/cascade-tuts/docs/advanced/','title':"Advanced Development",'content':"We\u0026rsquo;ll cover some more advanced topics, such as the REST API, Web Services and the Query and Locator Tools.\n"});index.add({'id':7,'href':'/cascade-tuts/docs/design/data-definition/','title':"Data Definition",'content':"What are Data Definitions? Data Definitions are the editable features of a specific page or block.\nXavier Example Continuing on our Content Page example, the Data Definition is defined to include:\n  Hero (Group)  WYSIWYG (wysiwyg editor)  Uses a custom WYSIWYG Configuration to hide/show various features, which gives dev staff additional control over what the users are able to insert onto their pages.   Extras (Group)  Custom files (JS and CSS) which is available to administrative groups only    What you cannot see from the page editor itself, is that all of these items are considered \u0026ldquo; Shared Fields\u0026quot;. These fields are reusable elements that allow for minimal management, but widespread use across multiple data definitions.\nShared Fields Shared fields are individual fields (e.g. WYSIWYG editor) or individual groups of fields (e.g. Hero). These fields allow us to create reusable entities for multiple data definitions. A big example of this is the extra\u0026rsquo;s group.\nExtras Shared Field The Extra\u0026rsquo;s group is used on all data definitions to be able to add custom stylesheets and/or scripts to either add or supplement functionality on an individual page. Rather than code this individually to each Data Definition, the shared field was created to be able to reuse, rather than duplicate.\nSmart Fields Smart fields are used to show or hide subsequent sections based on a user selection.\nExample  User selects internal on a radio button, showing a page chooser Alternatively, user selects external and receives a text box  Creating a Data Definition To create a Data Definition\n Navigate to Manage Site \u0026gt; Data Definitions. You may also want to add a new container, depending on the architecture desired. Enter the Name and select the Parent Container, as desired. Using either the Builder or XML editor, add or update your desired fields.  We recommend using the Builder to setup the initial data definition, and review the XML for a better understanding. Shared Fields can be used by adding a field and selecting Choose Shared Field Smart fields can be used by viewing the Advanced Options    Data Definition Warning\nRestructuring and/or renaming of fields may cause a loss of content. Use caution when moving a field out of a group and/or into a group that doesn\u0026rsquo;t permit multiple groups OR has a lower maximum number of groups allowed.\n "});index.add({'id':8,'href':'/cascade-tuts/docs/design/metadata/','title':"Metadata Sets",'content':"What are Metadata Sets? Metadata is data that describes an asset. This can be as simple or as complicated as desired for the use case. In the Xavier use case, we do our best to simplify this set across the entire site (including folders, files and pages).\nWhile there are a number of built-in fields that include:\n Name (display name, title) Summary (teaser, summary, description) Keywords Author Dates (start, end, review) Expiration Folder  We can also define some custom fields. We currently use 3 custom fields in our default metadata set. These are mainly used for pages and/or folders.\n Show in Navigation - shows/hides a page from the navigation menus on a content site, or other dynamic navigation areas Require Authentication - locks the page behind a user login Hide from Search Engine - includes a no-follow meta tag  Xavier Example: Our Default Metadata Set includes the three custom fields outlined above and also shows the following fields:\n Display Name, Title, Keywords, and Description  All other fields are hidden, as we do not intend to use them in our basic pages.\nCreating a Metadata Set  Navigate to Manage Site \u0026gt; Metadata Sets and click Add. You may also want to add a new container, depending on the architecture desired. Enter the Name and select the Parent Container, as desired. Identify which built-in fields you\u0026rsquo;d want to use and define any of the following:   Help Text Visibility - Determines where a field is shown. Inline = Content Tab; Visible = Shown on Metadata tab; Hidden = Not shown. Required  Define any Custom fields you would want to display. Preview \u0026amp; Submit!  "});index.add({'id':9,'href':'/cascade-tuts/docs/design/tasks/','title':"Design Tasks",'content':"Design Tasks These tasks will help you setup a basic static Template and start setting up your new editable content page.\n Define what you want your site to be  Write or draw a basic introduction of what you want the site to be.   Create the HTML Template - Using Cascade, create your HTML Template. Include the following items:  \u0026lt;title\u0026gt; Meta Description and Keywords, using System Tags Development framework of choice (bootstrap, foundation, bourbon, etc.) Basic Website layout, based on your site definition/drawing Place a default system region inside of your \u0026ldquo;main\u0026rdquo; content area   Create your Configuration  Choose the proper output and type of data. Assign your template   Create the Metadata Set  Define what items you must have and place them on the content editor screen Hide any metadata you don\u0026rsquo;t want to use Note: Use the \u0026ldquo;visible\u0026rdquo; for any content you may use, but don\u0026rsquo;t want immediately visible.   Create the Content Type  Assign the configuration and metadata set   Define the Data Definition (as desired)  Create the editable regions of your site Ensure your content type is updated to use this new data definition   Create your first page  Fill in all of the data definition areas for your new page. Note: Your page may or may not show any dynamic content depending on the Data Definition structure and/or template structure.    "});index.add({'id':10,'href':'/cascade-tuts/docs/','title':"Docs",'content':""});index.add({'id':11,'href':'/cascade-tuts/docs/development/code-sections/','title':"Code Sections",'content':""});index.add({'id':12,'href':'/cascade-tuts/docs/development/formats/','title':"Formats",'content':""});index.add({'id':13,'href':'/cascade-tuts/docs/development/velocity-tools/','title':"Velocity Tools",'content':""});})();